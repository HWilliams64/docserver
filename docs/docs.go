// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://github.com/HWilliams64/docserver/blob/main/License.md"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/forgot-password": {
            "post": {
                "description": "Initiates the password reset process by requesting a One-Time Password (OTP) to be sent (conceptually) to the user's registered email address.\n\nProvide the ` + "`" + `email` + "`" + ` address associated with the account you want to reset the password for.\n**Security Note:** To prevent attackers from figuring out which emails are registered (\"email enumeration\"), this endpoint will *always* return a ` + "`" + `202 Accepted` + "`" + ` response, regardless of whether the email exists in the system or not.\nIf the email *does* exist, the server generates an OTP, stores it temporarily, and (in a real system) would send it via email. The OTP is needed for the ` + "`" + `/auth/reset-password` + "`" + ` step.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Request Password Reset Code (OTP)",
                "parameters": [
                    {
                        "description": "The email address for the account needing a password reset.",
                        "name": "forgotPassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Request Accepted. If the email address is registered, an OTP has been generated (and would typically be emailed). Check your email for the code."
                    },
                    "400": {
                        "description": "Bad Request: The request body is invalid (e.g., missing email or invalid format).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while processing the request (e.g., OTP generation failed).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user using their registered email and password.\n\nIf the credentials are correct, the server generates a JSON Web Token (JWT). This token acts like a temporary key or session ID.\nYou need to include this JWT in the ` + "`" + `Authorization` + "`" + ` header (as a Bearer token) for subsequent requests to protected endpoints (like accessing your profile or documents).\nExample Header: ` + "`" + `Authorization: Bearer \u003cyour_token_here\u003e` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Log In to Your Account",
                "parameters": [
                    {
                        "description": "Your email and password.",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login Successful. The response body contains the JWT access token.",
                        "schema": {
                            "$ref": "#/definitions/api.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: The data you sent is invalid (e.g., missing email or password, incorrect JSON format).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: The email or password you provided is incorrect. Please check your credentials.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server during login (e.g., database issue, error generating the JWT).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Indicates the intention to log out. Since JWTs are stateless (the server doesn't keep track of active tokens), true logout happens on the client-side.\n\n**Action Required by Client:** To effectively log out, the client application (e.g., your web browser or mobile app) MUST delete or discard the stored JWT access token.\nCalling this endpoint doesn't invalidate the token on the server, but it serves as a conventional way to signal the end of a session in API design.",
                "tags": [
                    "Authentication"
                ],
                "summary": "Log Out (Client-Side Action)",
                "responses": {
                    "204": {
                        "description": "Logout Signaled. No content is returned. Remember to discard the JWT on the client."
                    },
                    "401": {
                        "description": "Unauthorized: Although logout is client-side, this endpoint might still require a valid token to be called as per API design consistency.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Completes the password reset process by setting a new password for the account.\n\nYou must provide:\n*   The ` + "`" + `email` + "`" + ` address of the account.\n*   The ` + "`" + `otp` + "`" + ` (One-Time Password) received after calling ` + "`" + `/auth/forgot-password` + "`" + `.\n*   The desired ` + "`" + `new_password` + "`" + ` (must meet minimum length requirements, e.g., 8 characters).\n\nThe server will first verify if the provided OTP is correct and hasn't expired for the given email. If valid, it will hash the ` + "`" + `new_password` + "`" + ` and update the user's account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Set New Password Using Reset Code (OTP)",
                "parameters": [
                    {
                        "description": "Email, OTP, and the new password.",
                        "name": "resetPassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Password Reset Successful. Your new password is now active. You can log in using it. No content is returned in the response body."
                    },
                    "400": {
                        "description": "Bad Request: The request body is invalid (e.g., missing fields, new password too short).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: The provided OTP is incorrect, expired, or does not match the email address.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: The profile associated with the email address could not be found (e.g., it might have been deleted after the OTP was requested).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server (e.g., hashing the new password failed, database update failed).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Creates a new user profile in the system. This is the first step for a new user to start using the service.\n\nYou need to provide your desired ` + "`" + `email` + "`" + `, a secure ` + "`" + `password` + "`" + ` (minimum 8 characters), your ` + "`" + `first_name` + "`" + `, and ` + "`" + `last_name` + "`" + `.\nThe server will securely hash the password before storing it (meaning the original password is never saved directly).\nIf the email address is already registered, the request will fail.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a New User Account",
                "parameters": [
                    {
                        "description": "User registration details. All fields except 'extra' are required.",
                        "name": "signup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Account Created Successfully. The response body contains the details of the newly created profile (excluding the password hash).",
                        "schema": {
                            "$ref": "#/definitions/models.Profile"
                        }
                    },
                    "400": {
                        "description": "Bad Request: The data you sent is invalid (e.g., missing required fields, invalid email format, password too short) OR the email address is already in use by another account.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while creating the account (e.g., password hashing failed, database connection issue).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/documents": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of documents that the currently logged-in user has access to (either owned or shared with them).\n\nThis endpoint supports powerful filtering, sorting, and pagination using query parameters:\n*   ` + "`" + `scope` + "`" + `: Control which documents to see:\n*   ` + "`" + `owned` + "`" + `: Only documents you created.\n*   ` + "`" + `shared` + "`" + `: Only documents shared with you by others.\n*   ` + "`" + `all` + "`" + ` (default): Both owned and shared documents.\n*   ` + "`" + `content_query` + "`" + `: Filter documents based on their JSON content using a specific query language (details likely in separate documentation or examples). This allows searching within the document data itself. Example: ` + "`" + `?content_query=metadata.status eq \"published\"` + "`" + `\n*   ` + "`" + `sort_by` + "`" + `: Choose the field to sort results by: ` + "`" + `creation_date` + "`" + ` (default) or ` + "`" + `last_modified_date` + "`" + `.\n*   ` + "`" + `order` + "`" + `: Set the sort direction: ` + "`" + `asc` + "`" + ` (ascending) or ` + "`" + `desc` + "`" + ` (descending, default).\n*   ` + "`" + `page` + "`" + `: For pagination, specify the page number (starts at 1, default is 1).\n*   ` + "`" + `limit` + "`" + `: For pagination, specify the number of documents per page (default is 20, max is 100).\n\nExample: ` + "`" + `/documents?scope=owned\u0026sort_by=last_modified_date\u0026order=asc\u0026page=1\u0026limit=10` + "`" + ` (Get the first 10 oldest modified documents owned by the user).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "List and Search Your Documents",
                "parameters": [
                    {
                        "enum": [
                            "owned",
                            "shared",
                            "all"
                        ],
                        "type": "string",
                        "default": "all",
                        "example": "owned",
                        "description": "Filter by ownership: 'owned', 'shared', or 'all'.",
                        "name": "scope",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "example": "user.name eq \"John Doe\"",
                        "description": "Advanced filter based on document content (specific syntax applies).",
                        "name": "content_query",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "creation_date",
                            "last_modified_date"
                        ],
                        "type": "string",
                        "default": "creation_date",
                        "example": "last_modified_date",
                        "description": "Field to sort results by.",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "example": "asc",
                        "description": "Sorting direction.",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "example": 2,
                        "description": "Page number for pagination (starts at 1).",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 50,
                        "description": "Number of documents per page.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of documents matching the criteria, along with pagination details (total count, current page, limit).",
                        "schema": {
                            "$ref": "#/definitions/api.GetDocumentsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: One or more query parameters are invalid (e.g., invalid 'scope', incorrect 'content_query' syntax, non-integer 'page'/'limit').",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while retrieving documents.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a logged-in user to create and store a new document.\n\nThe document's ` + "`" + `content` + "`" + ` can be any valid JSON structure – an object (` + "`" + `{}` + "`" + `), an array (` + "`" + `[]` + "`" + `), a string (` + "`" + `\"\"` + "`" + `), a number, a boolean (` + "`" + `true` + "`" + `/` + "`" + `false` + "`" + `), or ` + "`" + `null` + "`" + `.\nThe server automatically assigns a unique ID to the document and records the user who created it (the owner) and the creation/modification timestamps.\nYou must provide your access token for authentication. The request body needs a ` + "`" + `content` + "`" + ` field containing the JSON data you want to store.\n\nExample Request Body:\n` + "`" + `` + "`" + `` + "`" + `json\n{\n\"content\": {\n\"title\": \"My First Document\",\n\"body\": \"This is the content.\",\n\"tags\": [\"example\", \"getting started\"]\n}\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Create a New Document",
                "parameters": [
                    {
                        "description": "The JSON content you want to store in the new document.",
                        "name": "document",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateDocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Document Created Successfully. The response body contains the details of the newly created document, including its unique ID.",
                        "schema": {
                            "$ref": "#/definitions/models.Document"
                        }
                    },
                    "400": {
                        "description": "Bad Request: The request body is invalid. It must be valid JSON and contain the required 'content' field.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired. You need to be logged in to create documents.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while creating the document (e.g., database error).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/documents/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the full details of a single document using its unique identifier (` + "`" + `id` + "`" + `).\n\nYou can only retrieve a document if:\n1. You are the owner of the document.\nOR\n2. The document has been explicitly shared with you by its owner.\n\nProvide the document's ` + "`" + `id` + "`" + ` as part of the URL path. You also need your access token for authentication.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Get a Specific Document by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "doc_abc123xyz",
                        "description": "The unique identifier of the document you want to retrieve.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the document. The response body contains the document's details (ID, owner, content, timestamps).",
                        "schema": {
                            "$ref": "#/definitions/models.Document"
                        }
                    },
                    "400": {
                        "description": "Bad Request: The document ID provided in the URL path is missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden: You do not have permission to view this document. You are neither the owner nor has it been shared with you.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: No document exists with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while retrieving the document.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Replaces the *entire* existing content of a specific document with new content.\n\n**Important:** This operation overwrites the previous content completely. If you only want to modify parts of the content, you should first retrieve the document, make changes to the content in your application, and then use this endpoint to save the full, modified content.\n\nOnly the user who originally created (owns) the document is allowed to update it.\nProvide the document's ` + "`" + `id` + "`" + ` in the URL path and the new JSON ` + "`" + `content` + "`" + ` in the request body. Authentication via access token is required.\n\nExample Request Body:\n` + "`" + `` + "`" + `` + "`" + `json\n{\n\"content\": { \"message\": \"Updated content here!\" }\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Update a Document's Content",
                "parameters": [
                    {
                        "type": "string",
                        "example": "doc_abc123xyz",
                        "description": "The unique identifier of the document to update.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The new JSON content to replace the existing document content.",
                        "name": "document",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UpdateDocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document Updated Successfully. The response body contains the complete document with the updated content and modification timestamp.",
                        "schema": {
                            "$ref": "#/definitions/models.Document"
                        }
                    },
                    "400": {
                        "description": "Bad Request: The document ID in the path is missing/invalid, or the request body is invalid (must contain 'content' field with valid JSON).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not the owner of this document, so you cannot update it.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: No document exists with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while updating the document.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Permanently deletes a specific document from the system.\n\n**WARNING: This action is irreversible!** Once deleted, the document cannot be recovered.\nAny records indicating this document was shared with others will also be removed.\n\nOnly the user who originally created (owns) the document is allowed to delete it.\nProvide the document's ` + "`" + `id` + "`" + ` in the URL path. Authentication via access token is required.",
                "tags": [
                    "Documents"
                ],
                "summary": "Delete a Document",
                "parameters": [
                    {
                        "type": "string",
                        "example": "doc_abc123xyz",
                        "description": "The unique identifier of the document to delete.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Document Deleted Successfully. No content is returned in the response body because the resource no longer exists."
                    },
                    "400": {
                        "description": "Bad Request: The document ID provided in the URL path is missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not the owner of this document, so you cannot delete it.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: No document exists with the specified ID. (Note: The API might return 204 even if not found, treating deletion of a non-existent item as success).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while deleting the document.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/documents/{id}/shares": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of user profile IDs that a specific document has been shared with.\n\nOnly the user who originally created (owns) the document can use this endpoint to see who they've shared it with.\nProvide the document's ` + "`" + `id` + "`" + ` in the URL path. Authentication via access token is required.\nIf the document hasn't been shared with anyone, it returns an empty list.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sharing"
                ],
                "summary": "See Who a Document is Shared With",
                "parameters": [
                    {
                        "type": "string",
                        "example": "doc_abc123xyz",
                        "description": "The unique identifier of the document whose share list you want to view.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of profile IDs the document is shared with. The 'shared_with' array contains the IDs.",
                        "schema": {
                            "$ref": "#/definitions/api.GetSharersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: The document ID provided in the URL path is missing or invalid.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not the owner of this document, so you cannot view its share list.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: No document exists with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while retrieving the share list.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Completely replaces the list of users a specific document is shared with.\n\nProvide a JSON array named ` + "`" + `shared_with` + "`" + ` in the request body, containing the profile IDs of the users you want to share the document with.\n**Important:** Any users previously shared with, but *not* included in the new list, will lose access.\nTo remove *all* shares for a document, send an empty array: ` + "`" + `{\"shared_with\": []}` + "`" + `.\n\nOnly the document owner can perform this operation. You cannot share a document with yourself (the owner).\nProvide the document's ` + "`" + `id` + "`" + ` in the URL path. Authentication via access token is required.\n\nExample Request Body (Share with user 'user_123' and 'user_456'):\n` + "`" + `` + "`" + `` + "`" + `json\n{\n\"shared_with\": [\"user_123\", \"user_456\"]\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sharing"
                ],
                "summary": "Set/Replace Who a Document is Shared With",
                "parameters": [
                    {
                        "type": "string",
                        "example": "doc_abc123xyz",
                        "description": "The unique identifier of the document whose share list you want to set/replace.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "A JSON object containing the 'shared_with' key, whose value is an array of profile IDs.",
                        "name": "shareRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SetSharersRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Share List Updated Successfully. No content is returned in the response body."
                    },
                    "400": {
                        "description": "Bad Request: The request body is invalid (e.g., missing 'shared_with' array, invalid JSON) OR you tried to include the owner's ID in the 'shared_with' list.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not the owner of this document, so you cannot modify its share list.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: No document exists with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while updating the share list.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/documents/{id}/shares/{profile_id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a single specified user (by their ` + "`" + `profile_id` + "`" + `) to the list of users who can access a specific document.\n\nThis operation is *additive* – it doesn't affect other users the document might already be shared with.\nIt's also *idempotent*, meaning if you try to add a user who already has access, the operation succeeds without making any changes.\n\nOnly the document owner can perform this operation. You cannot share a document with yourself (the owner).\nProvide the document's ` + "`" + `id` + "`" + ` and the target user's ` + "`" + `profile_id` + "`" + ` in the URL path. Authentication via access token is required.",
                "tags": [
                    "Sharing"
                ],
                "summary": "Share a Document with One User",
                "parameters": [
                    {
                        "type": "string",
                        "example": "doc_abc123xyz",
                        "description": "The unique identifier of the document you want to share.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "user_123",
                        "description": "The unique identifier of the user profile you want to grant access to.",
                        "name": "profile_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User Added to Share List Successfully (or was already shared with). No content is returned."
                    },
                    "400": {
                        "description": "Bad Request: You tried to share the document with its owner (yourself).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not the owner of this document, so you cannot share it.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: The specified Document ID or Profile ID does not exist, or the IDs were missing from the URL path.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while adding the user to the share list.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a single specified user (by their ` + "`" + `profile_id` + "`" + `) from the list of users who can access a specific document.\n\nThis operation only affects the specified user; other users the document is shared with remain unaffected.\nIt's *idempotent*, meaning if you try to remove a user who doesn't currently have access (or never did), the operation succeeds without error.\n\nOnly the document owner can perform this operation.\nProvide the document's ` + "`" + `id` + "`" + ` and the target user's ` + "`" + `profile_id` + "`" + ` (the one to remove) in the URL path. Authentication via access token is required.",
                "tags": [
                    "Sharing"
                ],
                "summary": "Stop Sharing a Document with One User",
                "parameters": [
                    {
                        "type": "string",
                        "example": "doc_abc123xyz",
                        "description": "The unique identifier of the document you want to modify shares for.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "user_123",
                        "description": "The unique identifier of the user profile whose access you want to revoke.",
                        "name": "profile_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User Removed from Share List Successfully (or was not shared with). No content is returned."
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "403": {
                        "description": "Forbidden: You are not the owner of this document, so you cannot modify its shares.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: The specified Document ID or Profile ID does not exist, or the IDs were missing from the URL path.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while removing the user from the share list.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/profiles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows authenticated users to search for other user profiles within the system.\n\nYou can filter the search using query parameters in the URL:\n*   ` + "`" + `email` + "`" + `: Find profiles where the email address contains the provided text (case-insensitive). Example: ` + "`" + `?email=test.com` + "`" + `\n*   ` + "`" + `first_name` + "`" + `: Find profiles where the first name contains the provided text (case-insensitive). Example: ` + "`" + `?first_name=jo` + "`" + `\n*   ` + "`" + `last_name` + "`" + `: Find profiles where the last name contains the provided text (case-insensitive). Example: ` + "`" + `?last_name=smi` + "`" + `\nYou can combine multiple filters. The search returns profiles that match *all* provided filters.\n\nResults are paginated to handle potentially large numbers of users:\n*   ` + "`" + `page` + "`" + `: Specifies which page of results to retrieve (starts at 1). Default is 1. Example: ` + "`" + `?page=2` + "`" + `\n*   ` + "`" + `limit` + "`" + `: Specifies how many profiles to return per page. Default is 20, maximum is 100. Example: ` + "`" + `?limit=50` + "`" + `\n\nExample combining filters and pagination: ` + "`" + `/profiles?first_name=a\u0026page=1\u0026limit=10` + "`" + ` (Find profiles with 'a' in the first name, show the first 10 results).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Search User Profiles",
                "parameters": [
                    {
                        "type": "string",
                        "example": "user@example.com",
                        "description": "Filter profiles where email contains this text (case-insensitive).",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "John",
                        "description": "Filter profiles where first name contains this text (case-insensitive).",
                        "name": "first_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Doe",
                        "description": "Filter profiles where last name contains this text (case-insensitive).",
                        "name": "last_name",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number for results (starts at 1).",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "example": 20,
                        "description": "Number of profiles per page.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of profiles matching the search criteria, along with pagination details (total count, current page, limit).",
                        "schema": {
                            "$ref": "#/definitions/api.SearchProfilesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid query parameters. 'page' and 'limit' must be positive integers. 'limit' cannot exceed 100.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired. You need to be logged in to search profiles.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while searching for profiles.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        },
        "/profiles/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile details (like first name, last name, email, creation date) for the user who is currently logged in.\n\nThink of this as your \"My Account\" page data. To use this endpoint, you must first authenticate (log in) to get an access token.\nThe server uses the access token you provide in the request header to figure out who you are and fetch your specific profile information from the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Get Your Own Profile",
                "responses": {
                    "200": {
                        "description": "Your profile details were successfully retrieved. The response body contains your profile information (excluding sensitive data like the password hash).",
                        "schema": {
                            "$ref": "#/definitions/models.Profile"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired. You might need to log in again.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: The server couldn't find a profile associated with your access token. This is unusual if your token is valid.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server side (e.g., a database connection issue or a problem reading your user ID from the token context).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows the currently logged-in user to update their own profile information.\n\nYou can change your ` + "`" + `first_name` + "`" + `, ` + "`" + `last_name` + "`" + `, and any custom ` + "`" + `extra` + "`" + ` data associated with your profile.\n**Important:** You *cannot* change your email address or password using this endpoint. Password changes typically have a separate, more secure process (like a password reset flow).\nYou need to provide your current access token for authentication. The request body should contain the fields you want to update in JSON format.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profiles"
                ],
                "summary": "Update Your Own Profile",
                "parameters": [
                    {
                        "description": "The profile fields you want to update. 'first_name' and 'last_name' are required.",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UpdateProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Your profile was successfully updated. The response body contains the complete, updated profile.",
                        "schema": {
                            "$ref": "#/definitions/models.Profile"
                        }
                    },
                    "400": {
                        "description": "Bad Request: The data you sent in the request body is invalid. This could be due to missing required fields ('first_name', 'last_name') or incorrect JSON formatting.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired. You need to be logged in to update your profile.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: The server couldn't find your profile based on your access token.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while trying to update your profile (e.g., a database error).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Permanently deletes the account and profile data for the currently logged-in user.\n\n**WARNING: This action is irreversible!** Once you delete your account, all your data associated with it (profile, documents you own, etc.) will be removed.\n*(Developer Note: Full cascading delete logic, like removing shared document access, might still be under development. Currently, it primarily removes the main profile record.)*\nYou must provide your valid access token to authorize this action.",
                "tags": [
                    "Profiles"
                ],
                "summary": "Delete Your Own Profile",
                "responses": {
                    "204": {
                        "description": "Account Successfully Deleted. No content is returned in the response body because the resource (your profile) no longer exists."
                    },
                    "401": {
                        "description": "Unauthorized: Your access token is missing, invalid, or expired. You need to be logged in to delete your account.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found: The server couldn't find your profile based on your access token.",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Something went wrong on the server while trying to delete your account (e.g., a database error).",
                        "schema": {
                            "$ref": "#/definitions/utils.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.CreateDocumentRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "description": "Content can be any valid JSON"
                }
            }
        },
        "api.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "api.GetDocumentsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Document"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.GetSharersResponse": {
            "type": "object",
            "properties": {
                "shared_with": {
                    "description": "List of Profile IDs (dashless)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "api.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "api.ProfileResponse": {
            "type": "object",
            "properties": {
                "creation_date": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "extra": {},
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_modified_date": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "api.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "email",
                "new_password",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "api.SearchProfilesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.ProfileResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "api.SetSharersRequest": {
            "type": "object",
            "required": [
                "shared_with"
            ],
            "properties": {
                "shared_with": {
                    "description": "Use pointer to distinguish between empty list and not provided?\nNo, binding:\"required\" means it must be present, even if empty array ` + "`" + `[]` + "`" + `.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "api.SignupRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "extra": {},
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "description": "Add basic password length validation",
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "api.UpdateDocumentRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {}
            }
        },
        "api.UpdateProfileRequest": {
            "type": "object",
            "required": [
                "first_name",
                "last_name"
            ],
            "properties": {
                "extra": {},
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "models.Document": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Can be any JSON structure or simple text"
                },
                "creation_date": {
                    "description": "UTC",
                    "type": "string"
                },
                "id": {
                    "description": "Unique ID (UUID, dashless)",
                    "type": "string"
                },
                "last_modified_date": {
                    "description": "UTC",
                    "type": "string"
                },
                "owner_id": {
                    "description": "Profile ID of the owner",
                    "type": "string"
                }
            }
        },
        "models.Profile": {
            "type": "object",
            "properties": {
                "creation_date": {
                    "description": "UTC",
                    "type": "string"
                },
                "email": {
                    "description": "Unique, used for login",
                    "type": "string"
                },
                "extra": {
                    "description": "User-defined data"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "description": "Unique ID (UUID, dashless)",
                    "type": "string"
                },
                "last_modified_date": {
                    "description": "UTC",
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password_hash": {
                    "description": "Store hash, include in JSON persistence.",
                    "type": "string"
                }
            }
        },
        "utils.APIError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "DocServer API",
	Description:      "Type \"Bearer\" followed by a space and JWT token.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
