# .github/workflows/release.yml
name: Test, Build and Release

on:
  push:
    branches:
      - '**' # Run tests on all branches
    paths:
      - .github/workflows/**
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches:
      - main # Run tests on PRs targeting main
    paths:
      - .github/workflows/**
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Specify your Go version
          cache: true
          cache-dependency-path: go.sum

      - name: Check out code
        uses: actions/checkout@v4

      - name: Run tests
        run: go test ./...

  build:
    name: Build Binaries
    needs: test # Run after tests pass
    if: github.ref == 'refs/heads/main' # Only run on main branch pushes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64] # Add arm64 architecture
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Specify your Go version
          cache: true
          cache-dependency-path: go.sum

      - name: Check out code
        uses: actions/checkout@v4

      - name: Build
        id: build # Add an ID to reference outputs
        run: |
          OUTPUT_NAME="docserver-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          # Set output for subsequent steps
          echo "OUTPUT_NAME=${OUTPUT_NAME}" >> $GITHUB_OUTPUT
          echo "Building $OUTPUT_NAME..."
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o "$OUTPUT_NAME" main.go
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Make executable (Linux/Mac)
        # Only run for linux or darwin GOOS
        if: matrix.goos == 'linux' || matrix.goos == 'darwin'
        run: chmod +x ${{ steps.build.outputs.OUTPUT_NAME }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # Use the same artifact name regardless of OS for easier downloading
          name: docserver-${{ matrix.goos }}-${{ matrix.goarch }}
          # Upload the specific file that was built
          path: ${{ steps.build.outputs.OUTPUT_NAME }}

  release:
    name: Create Release
    needs: build # Run after build finishes
    if: github.ref == 'refs/heads/main' # Only run on main branch pushes
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases
      pull-requests: write # Needed to create the release PR
      issues: write # Needed to add labels to the release PR
      # Required by release-please v4
      id-token: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for conventional commits history analysis

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts to a directory

      - name: List downloaded artifacts # Optional: for debugging
        run: ls -R artifacts

      - name: Set up Go for release tool (if needed)
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: go.sum

      # Using google-github-actions/release-please-action as an example
      # You might prefer a different conventional commit release action
      - name: Create Release using release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          command: release-please manifest # Determine version, update changelog, output version info
          release-type: go
          # Optional: specify package name if not root
          # package-name: your-package-name
          # Optional: configure how release-please finds files
          # extra-files: |
          #   path/to/your/version/file.json:$.version
          #   another/file

      # --- Custom Steps Start ---

      - name: Update main.go version and run swag init
        # Run only if release-please detected a new version to release
        if: steps.release.outputs.releases_created == 'true'
        run: |
          echo "Updating version in main.go to ${{ steps.release.outputs.version }}"
          # Use sed to replace the version line. Adjust line number if needed.
          # Assumes version format like 1.2.3 (no 'v' prefix from steps.release.outputs.version)
          sed -i "s|// @version .*|// @version         ${{ steps.release.outputs.version }}|g" main.go

          echo "Installing swag..."
          go install github.com/swaggo/swag/cmd/swag@latest
          export PATH=$(go env GOPATH)/bin:$PATH

          echo "Running swag init..."
          swag init

      - name: Commit Changelog, Version Update, and Docs Regeneration
        if: steps.release.outputs.releases_created == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          echo "Staging changes..."
          # Add CHANGELOG.md (updated by manifest), main.go, and docs files
          git add CHANGELOG.md main.go docs/docs.go docs/swagger.json docs/swagger.yaml

          # Check if there are staged changes before committing
          # Use git status --porcelain to reliably check for changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "Committing changes..."
            # Use the tag_name from release-please for the commit message
            git commit -m "chore(release): ${{ steps.release.outputs.tag_name }}" -m "Update version, regenerate docs, and update changelog."

            echo "Pushing commit..."
            # Push the commit to the current branch (e.g., main)
            # This is crucial for github-release to find the commit
            git push origin ${{ github.ref_name }}
          else
            echo "No changes to commit."
          fi
      # --- Custom Steps End ---

      # Create the actual GitHub release using the tag version from the manifest step
      # and the commit created in the previous step.
      - name: Create GitHub Release using release-please
        id: github_release # New ID for this step
        if: steps.release.outputs.releases_created == 'true' # Only run if manifest found a release
        uses: googleapis/release-please-action@v4
        with:
          command: github-release # Create the GitHub release
          # release-please should automatically pick up the version/tag from the manifest run context
      # Upload assets to the release created by release-please
      # This step assumes release-please created a release and outputted upload_url
      - name: Upload Release Assets
        if: steps.github_release.outputs.release_created == 'true' # Use output from github-release step
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use gh cli or another tool to upload assets from the 'artifacts' directory
          # Example using gh cli (ensure it's available or install it)
          # sudo apt-get update && sudo apt-get install -y gh
          # Find all artifact directories (e.g., artifacts/docserver-linux-amd64)
          # and upload the binary within each
          for dir in artifacts/*; do
            if [ -d "$dir" ]; then
              asset_path=$(find "$dir" -maxdepth 1 -type f -name 'docserver-*' | head -n 1)
              if [ -n "$asset_path" ]; then
                echo "Uploading $asset_path"
                gh release upload ${{ steps.github_release.outputs.tag_name }} "$asset_path" --clobber # Use output from github-release step
              else
                echo "No binary found in $dir"
              fi
            fi
          done