# .github/workflows/release.yml
name: Test, Build and Release

on:
  push:
    branches:
      - '**' # Run tests on all branches
    paths:
      - .github/workflows/**
      - release-please-config.json
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches:
      - main # Run tests on PRs targeting main
    paths:
      - .github/workflows/**
      - release-please-config.json
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Specify your Go version
          cache: true
          cache-dependency-path: go.sum

      - name: Run tests
        run: go test ./...

  build:
    name: Build Binaries
    needs: test # Run after tests pass
    if: github.ref == 'refs/heads/main' # Only run on main branch pushes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64] # Add arm64 architecture
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Specify your Go version
          cache: true
          cache-dependency-path: go.sum

      - name: Build
        id: build # Add an ID to reference outputs
        run: |
          OUTPUT_NAME="docserver-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          # Set output for subsequent steps
          echo "OUTPUT_NAME=${OUTPUT_NAME}" >> $GITHUB_OUTPUT
          echo "Building $OUTPUT_NAME..."
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o "$OUTPUT_NAME" main.go
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Make executable (Linux/Mac)
        # Only run for linux or darwin GOOS
        if: matrix.goos == 'linux' || matrix.goos == 'darwin'
        run: chmod +x ${{ steps.build.outputs.OUTPUT_NAME }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # Use the same artifact name regardless of OS for easier downloading
          name: docserver-${{ matrix.goos }}-${{ matrix.goarch }}
          # Upload the specific file that was built
          path: ${{ steps.build.outputs.OUTPUT_NAME }}

  release:
    name: Create Release
    needs: build # Run after build finishes
    if: github.ref == 'refs/heads/main' # Only run on main branch pushes
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases
      pull-requests: write # Needed to create the release PR
      issues: write # Needed to add labels to the release PR
      # Required by release-please v4
      id-token: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for conventional commits history analysis

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts to a directory

      - name: List downloaded artifacts # Optional: for debugging
        run: ls -R artifacts

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your preferred Node.js version

      - name: Install release-please
        run: npm install -g release-please

      - name: Set up Go for swag
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: go.sum

      # Run manifest command to check if release is needed and get version info
      # Use --no-signoff to prevent commit, --print-manifest-path to get output easily
      - name: Check for pending release and get version
        id: check_release
        run: |
          set -e # Exit on error
          # Run release-please manifest. It will exit with 0 if no release needed, non-zero otherwise.
          # Capture output to check for version info if a release IS needed.
          # Use GITHUB_TOKEN for authentication
          if output=$(release-please manifest --token=${{ secrets.GITHUB_TOKEN }} --config-file .github/workflows/release-please-config.json --no-signoff --print-manifest-path 2>&1); then
            echo "No release needed."
            echo "release_needed=false" >> $GITHUB_OUTPUT
          else
            # If manifest command failed (meaning a release IS needed), extract version
            echo "Release needed. Output:"
            echo "$output"
            # Extract version (assuming format like "Created manifest at: .manifest.json")
            # This might need adjustment based on actual output format
            manifest_path=$(echo "$output" | grep -oP '\.manifest\.json$') || true # Get manifest path
            if [[ -z "$manifest_path" ]]; then manifest_path=".release-please-manifest.json"; fi # Default if grep fails
            echo "Manifest path: $manifest_path"
            # Extract version from the generated manifest file (more reliable)
            # Requires jq
            sudo apt-get update && sudo apt-get install -y jq
            version=$(jq -r '."." // empty' "$manifest_path")
            tag_name="v$version" # Construct tag name

            if [[ -z "$version" ]]; then
              echo "Error: Could not extract version from manifest."
              exit 1
            fi

            echo "Proposed version: $version"
            echo "Proposed tag: $tag_name"
            echo "release_needed=true" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Pass token for API calls
      # --- Custom Steps Start ---

      - name: Update main.go version and run swag init
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          echo "Updating version in main.go to ${{ steps.check_release.outputs.version }}"
          # Use sed to replace the version line.
          sed -i "s|// @version .*|// @version         ${{ steps.check_release.outputs.version }}|g" main.go

          echo "Installing swag..."
          go install github.com/swaggo/swag/cmd/swag@latest
          export PATH=$(go env GOPATH)/bin:$PATH

          echo "Running swag init..."
          swag init
      # Run manifest again with --signoff to generate changelog, commit, and push ALL changes
      - name: Generate Changelog, Commit, and Push
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          # Configure git user for the commit release-please will make
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Add the modified main.go and docs files so release-please includes them
          git add main.go docs/docs.go docs/swagger.json docs/swagger.yaml

          # Run manifest with signoff - this creates the commit and pushes it
          release-please manifest --signoff --token=${{ secrets.GITHUB_TOKEN }} --config-file .github/workflows/release-please-config.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Custom Steps End ---

      # Create the GitHub Release using the commit pushed by the previous step
      - name: Create GitHub Release
        id: github_release
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          release-please github-release --token=${{ secrets.GITHUB_TOKEN }} --config-file .github/workflows/release-please-config.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Upload assets to the release created by release-please
      # This step assumes release-please created a release and outputted upload_url
      - name: Upload Release Assets
        # Use the tag_name determined earlier if release was needed
        if: steps.check_release.outputs.release_needed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure gh cli is installed
          sudo apt-get update && sudo apt-get install -y gh

          echo "Uploading assets for tag ${{ steps.check_release.outputs.tag_name }}"
          # Find all artifact directories (e.g., artifacts/docserver-linux-amd64)
          # and upload the binary within each
          for dir in artifacts/*; do
            if [ -d "$dir" ]; then
              asset_path=$(find "$dir" -maxdepth 1 -type f -name 'docserver-*' | head -n 1)
              if [ -n "$asset_path" ]; then
                echo "Uploading $asset_path"
                gh release upload ${{ steps.check_release.outputs.tag_name }} "$asset_path" --clobber
              else
                echo "No binary found in $dir"
              fi
            fi
          done